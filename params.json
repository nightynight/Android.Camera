{
  "name": "Android.camera",
  "tagline": "",
  "body": "##Android调用相机拍照可分为两步：发送拍照意图和处理返回结果。\r\n首先在manifest中进行相关配置：\r\n```\r\n<uses-feature android:name=\"android.hardware.camera\"\r\n              android:required=\"true\" />\r\n```\r\n如果我们的应用使用相机，但相机并不是应用的正常运行所必不可少的组件，可以将android:required设置为\"false\"。这样的话，Google Play 也会允许没有相机的设备下载该应用。\r\n####发送拍照意图：\r\n```\r\nstatic final int REQUEST_IMAGE_CAPTURE = 1;\r\nprivate void dispatchTakePictureIntent() {\r\n    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);\r\n    }\r\n}\r\n```\r\n注意在调用startActivityForResult()方法之前，先调用resolveActivity()，这个方法会返回能处理该Intent的第一个Activity（译注：即检查有没有能处理这个Intent的Activity）。执行这个检查非常重要，因为如果在调用startActivityForResult()时，没有应用能处理你的Intent，应用将会崩溃。所以只要返回结果不为null，使用该Intent就是安全的。\r\n####处理返回结果：\r\nAndroid的相机应用会把拍好的照片编码为缩小的Bitmap，使用extra value的方式添加到返回的Intent当中，并传送给onActivityResult()，对应的Key为\"data\"。下面的代码展示的是如何获取这一图片并显示在ImageView上。\r\n```\r\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\r\n        Bundle extras = data.getExtras();\r\n        Bitmap imageBitmap = (Bitmap) extras.get(\"data\");\r\n        mImageView.setImageBitmap(imageBitmap);\r\n    }\r\n}\r\n```\r\n##保存全尺寸图片\r\n首先加入相关权限：\r\n```\r\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n```\r\n当发送的intent调用intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photoFile))时，相机会把拍好的照片写入photoFile这个文件中。\r\n那么我们想要创建这个文件：\r\n```\r\nprivate String mCurrentPhotoPath;\r\nprivate File createImageFile() throws IOException {\r\n    // Create an image file name\r\n    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\r\n    String imageFileName = \"JPEG_\" + timeStamp + \"_\";\r\n    File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);\r\n    //先创建一个临时文件，相机拍完照后把数据写到这个临时文件中\r\n    File image = File.createTempFile(\r\n            imageFileName,  /* prefix */\r\n            \".jpg\",         /* suffix */\r\n            storageDir      /* directory */\r\n    );\r\n    mCurrentPhotoPath = image.getAbsolutePath();\r\n    return image;\r\n}\r\n```\r\n这里使用日期时间戳作为新照片的文件名，就是为了保证图片名的唯一性。\r\n现在我们可以像这样创建并触发一个Intent：\r\n```\r\nprivate void dispatchTakePictureIntent() {\r\n    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n        // Create the File where the photo should go\r\n        File photoFile = null;\r\n        try {\r\n            photoFile = createImageFile();\r\n        } catch (IOException ex) {\r\n            // Error occurred while creating the File\r\n        }\r\n        // Continue only if the File was successfully created\r\n        if (photoFile != null) {\r\n            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(photoFile));\r\n            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);\r\n        }\r\n    }\r\n}\r\n```\r\n当拍完照之后，图片就写入了photoFile文件中。但此时返回的ActivityResult中就没有Bitmap对象了。此时如果我们要在imageView中显示照片，可以从photoFile文件中获取。\r\n##将照片添加到系统相册中\r\n```\r\nprivate void galleryAddPic() {\r\n    Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n    File f = new File(mCurrentPhotoPath);\r\n    Uri contentUri = Uri.fromFile(f);\r\n    mediaScanIntent.setData(contentUri);//把图片的Uri放入intent中\r\n    this.sendBroadcast(mediaScanIntent);//发送广播，系统会把该文件写入相册\r\n}\r\n```\r\n只需在合适的地方调用该方法就可以把图片添加到相册中，比如在onActivityResult中\r\n```\r\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\r\n        galleryAddPic(mCurrentPhotoPath);\r\n    }\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}